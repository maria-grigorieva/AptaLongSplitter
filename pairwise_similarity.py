from Bio import SeqIO
from Bio.Seq import Seq
from Bio import pairwise2
from Bio.pairwise2 import format_alignment
from Bio import Align

FILE_PATH = "input/FAX54985_pass_barcode05_61ab2510_eb99195c_0.fastq"

records = list(SeqIO.parse(FILE_PATH, "fastq"))
print(len(records))
sequences = [str(rec.seq) for rec in records]

barcode = "AAGGTTAAAAGGTTACACAAACCCTGGACAAGCAGCACCT"

sequence1 = 'TAACCTACTTCGACGAGCATTACGTATTGCTAAGGTTTAAAAGGTTACACCAGAACGCCTGGACAAGCAGCACCTGGCACCTAGAGGTAAGGCGGGGCTGCCACGACCACCACGCGCGAGTCCACAGTCACTGCAGCGCAGCCTCATCCAGGAACCCCAGGCCCGGGGAAAGGCTGGGCGACGCCTGCGGGAGGCGCTGGGGCGCACCTGGAGCTCGCCGGGATGGGTGGGGGTCAGGGCGAGCCCGCGCCCGACGGCGAAGTGAGGGCGCCTGCAGGACGGCATCGAGGACTGCCGCGTCCGAGGAGAGCTCCGCACTCTTGCGGGAGGGCGACCCAGACGCTCACCAAGTCGCAAACGGTGCGCACCGCGAGGAGCCTGCGGGCGTCGGGACGCAAAGCGTTCTGGGCGCCGGCTGT'
sequence2 = 'GTTGTGTAACCTACTTGGTTGAGTTACGTATTGCTAAGGTTAAAAGGTTACACAAACCCTGGACAAGCAGCGCCTCCAGGATCTCACTAAGCGGGCGCCGTCCTACGACCCGCGCGCTTTCAGGACCACTCGGGCGCGTGGCAGGTCGCTTGCACGCCCGCGACTATCCTGTGACGGGAAAGGTCCGGCCATTTGGCAAACTGGGGGCGAGGCCTCAGGCGGAAGCTGGGAAGGCGCCGCCAGCTTGTACCGGCCGAAGGCCGTCCGGTAAGGCGCACAGGGCAGCGGCGCTGCCGGAGGACCAGGCCGGCGTGCCGGCGTCCGGCGAGATCGCAAGCTGCGCCGCCGGCGCTGGGCATGGCCGACCGGTCGGCGGGACGCCCGCCCGCCCAGCTGGCCAGAGCTCCGCCCGCGCGCGCCCGGCCCCGCCCACGCGCTCTCTACAGCTTCTGGTAGCCGGCTCCGCCCCGCTCTAACCCGCCACGCCGCCGTCCCGTACCCTGGCCCCGCCCCGCGCCCCGGATATGCTGGGACAGCCCGCGCCCCTAGAACGCTTTGCGTCCCGACGCCCACAGGTCCTCGCGGTGCGCACCGTTTCAACTTGGTGAGTGTCTGGGTCGCCTCGCTGCCGGAAGGTGCGGACTCTCCCTCGGGACGGTGGTGGCAGCCTCGAGTGGTCCTGCAGGCGCCCTGGCTTGGCCATCAGGTGTGGGCCGCCCTTGACCCCCGCCCATCCCGGGCGACTCCAGGTGCGCCCAAGTGCCCCTCCCCAGGTGTTGCCCAGCCTTTCGCCGGGCCTGGGTTCCTGGACTAGGCTGCGCTGCAGTGCTGGAGCTGGCGTGTGGCGGGGGTCGTCGGCAGCCCCTGCCTTACCTCTGGTGCAGGTGTATACTTGTCCAGGGTTGTAAGCCTTTAACCTTAGCAATACATAGC'
phred = [5, 4, 4, 5, 3, 5, 2, 6, 4, 4, 2, 6, 4, 2, 3, 12, 6, 6, 7, 15, 7, 6, 8, 9, 8, 5, 4, 3, 7, 7, 15, 11, 11, 24, 26, 24, 20, 20, 26, 23, 20, 10, 7, 6, 11, 21, 21, 23, 28, 18, 15, 9, 8, 6, 16, 21, 21, 25, 10, 10, 11, 13, 14, 8, 7, 7, 9, 7, 5, 4, 4, 7, 9, 19, 18, 18, 19, 26, 8, 8, 3, 5, 8, 9, 14, 12, 15, 15, 23, 10, 11, 10, 17, 15, 16, 11, 11, 11, 18, 14]
#sequence = "TGTTATGTCCTCCTGCTTCGTTCAGTTACGTATGCTAAGGTTAAAAGGATTCATTCCCACGGTAACACCAGCACCTGGCTTCTGGACTACCTATGCGGAGATGGTATGTACGGGAGGCGTTGCGTGCCGTGGTTACGGTCGAGGAGCTCCTCTGACTGTAACCACGTGTTGGCGGGAGTGTGTACATTCAGGTGTATGCATTGGGTCATCCAGAAGCCAGGTGCTGGTGTTACCGTGGAGATGAATCCTTTTAACCTTAGCAATACGTTGT"
# substrings = [sequence[i:i+len(barcode)] for i in range(len(sequence) - len(barcode) + 1)]
# weights = [phred[i:i+len(barcode)] for i in range(len(phred) - len(barcode) + 1)]

# alignments1 = pairwise2.align.localms(barcode, sequence1, 5, -4, -4, -.1)
# print(format_alignment(*alignments1[0]))
#
# alignments2 = pairwise2.align.localms(barcode, sequence2, 5, -4, -4, -.1)
# print(format_alignment(*alignments2[0]))
counter = 0
for s in sequences[:100]:
    alignments = pairwise2.align.localms(barcode, s, 5, -4, -4, -.9)
    print(format_alignment(*alignments[0]))
    if alignments[0].score > 150:
        counter += 1
    seq_to_remove = s[alignments[0].start:alignments[0].end]
    print(f'seq to remove: {seq_to_remove}')
print(counter)
# for i in substrings:
#     alignments = aligner.align(i, barcode)
#     alignment = alignments[0]
#     print(alignment)

# from math import log
#
# def gap_function(x, y):  # x is gap position in seq, y is gap length
#     if y == 0:  # No gap
#         return 0
#     elif y == 1:  # Gap open penalty
#         return -2
#     return - (2 + y/4.0 + log(y)/2.0)
#
#
# for i in substrings:
#     alignments = pairwise2.align.globalmc(i, barcode, 5, -4,
#                                      gap_function, gap_function)
#     print(format_alignment(*alignments[0]))


